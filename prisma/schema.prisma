// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  compareAtPrice Float?
  images      Json
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  inventory   Int      @default(0)
  ratings     Float    @default(0)
  reviewCount Int      @default(0)
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String  // e.g., "Color", "Size"
  value     String  // e.g., "Red", "Large"
  price     Float?  // Price adjustment
  inventory Int     @default(0)
  sku       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name, value])
  @@map("product_variants")
}

model Customer {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  phone     String?
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("customers")
}

model Address {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  zipCode    String
  country    String   @default("US")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("addresses")
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  price     Float   // Price at time of adding to cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerId      String?
  customer        Customer?   @relation(fields: [customerId], references: [id])
  email           String
  phone           String?
  status          OrderStatus @default(PENDING)
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float
  shippingAddress Json        // Stored as JSON
  billingAddress  Json?       // Stored as JSON
  items           OrderItem[]
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float   // Price at time of purchase
  createdAt DateTime @default(now())

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  name       String
  email      String
  rating     Int      // 1-5 stars
  title      String?
  comment    String
  verified   Boolean  @default(false)
  helpful    Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}